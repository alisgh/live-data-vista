import React, { useState, useMemo } from 'react';
import { usePLCDirect } from '@/hooks/usePLCDirect';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Search, Filter, Save, RefreshCw } from 'lucide-react';

// PLC Variable data from your CSV
const plcVariables = [
  { name: "Al_Err_retain_write.Active", id: 38, desc: "Automatic generated by Alarm editor - Alarm status", type: "BOOL", access: "R", val: "0" },
  { name: "Al_retain.Active", id: 40, desc: "Automatic generated by Alarm editor - Alarm status", type: "BOOL", access: "R", val: "0" },
  { name: "AlarmLogReset", id: 42, desc: "Reset the alarm log", type: "BOOL", access: "RW", val: "0" },
  { name: "AlarmMng.AlrmResByBms", id: 56, desc: "Alarm reset by BMS", type: "BOOL", access: "RW", val: "0" },
  { name: "AlarmMng.UnitAlrm", id: 62, desc: "Unit alarm (triggered one or more alarms are active)", type: "BOOL", access: "R", val: "0" },
  { name: "ApplicaControlla_Vars.BoostSet", id: 71, desc: "Boost setpoint", type: "REAL", access: "RW", val: "25.00" },
  { name: "ApplicaControlla_Vars.ComfortSet", id: 73, desc: "Comfort setpoint", type: "REAL", access: "RW", val: "22.00" },
  { name: "ApplicaControlla_Vars.DHW_InletTemp", id: 75, desc: "DHW inlet temperature", type: "REAL", access: "R", val: "39.00" },
  { name: "light1", id: 698, desc: "", type: "BOOL", access: "RW", val: "0" },
  { name: "light2", id: 699, desc: "", type: "BOOL", access: "RW", val: "0" },
  { name: "Vent1", id: 685, desc: "", type: "BOOL", access: "RW", val: "0" },
  { name: "Vent2", id: 686, desc: "", type: "BOOL", access: "RW", val: "0" },
  { name: "SetP", id: 668, desc: "Setpoint", type: "REAL", access: "RW", val: "15.00" },
  { name: "Temp1", id: 671, desc: "", type: "UDINT", access: "RW", val: "0" },
  { name: "Temp2", id: 672, desc: "", type: "UDINT", access: "RW", val: "0" },
  { name: "UnitOff", id: 682, desc: "Unit Off status: TRUE = Unit OFF", type: "BOOL", access: "R", val: "1" },
  { name: "UnitOn", id: 683, desc: "Unit On status: TRUE = Unit ON", type: "BOOL", access: "R", val: "0" },
  { name: "UnitStatus", id: 684, desc: "Unit status", type: "DINT", access: "R", val: "6" },
];

const PLCConfigPage = () => {
  const [controllerIp, setControllerIp] = useState('192.168.0.213');
  const { data, connectionStatus, writeVariable, refreshData } = usePLCDirect(controllerIp);
  const { toast } = useToast();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [filterAccess, setFilterAccess] = useState('all');
  const [editingValues, setEditingValues] = useState<Record<string, string>>({});

  // Filter variables based on search and filters
  const filteredVariables = useMemo(() => {
    return plcVariables.filter(variable => {
      const matchesSearch = variable.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           variable.desc.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesType = filterType === 'all' || variable.type === filterType;
      const matchesAccess = filterAccess === 'all' || 
                           (filterAccess === 'RW' && variable.access.includes('W')) ||
                           (filterAccess === 'R' && variable.access === 'R');
      
      return matchesSearch && matchesType && matchesAccess;
    });
  }, [searchTerm, filterType, filterAccess]);

  const handleValueChange = (variableName: string, value: string) => {
    setEditingValues(prev => ({
      ...prev,
      [variableName]: value
    }));
  };

  const handleSaveVariable = async (variableName: string, type: string) => {
    const editValue = editingValues[variableName];
    if (editValue === undefined) return;

    try {
      let numericValue: number;
      
      if (type === 'BOOL') {
        numericValue = editValue.toLowerCase() === 'true' || editValue === '1' ? 1 : 0;
      } else {
        numericValue = parseFloat(editValue);
        if (isNaN(numericValue)) {
          throw new Error('Invalid numeric value');
        }
      }

      await writeVariable(variableName, numericValue);
      
      toast({
        title: "Variable Updated",
        description: `${variableName} set to ${editValue}`,
        duration: 3000,
      });

      // Clear the editing value
      setEditingValues(prev => {
        const newValues = { ...prev };
        delete newValues[variableName];
        return newValues;
      });

    } catch (error) {
      toast({
        title: "Update Failed",
        description: `Failed to update ${variableName}: ${error}`,
        variant: "destructive",
        duration: 5000,
      });
    }
  };

  const getVariableCurrentValue = (variableName: string, defaultValue: string) => {
    // Try to get current value from PLC data
    if (data) {
      const key = variableName.toLowerCase();
      if (key in data) {
        return String((data as any)[key]);
      }
    }
    return defaultValue;
  };

  const getAccessBadgeColor = (access: string) => {
    if (access.includes('W')) return 'bg-green-600';
    return 'bg-blue-600';
  };

  const getTypeBadgeColor = (type: string) => {
    switch (type) {
      case 'BOOL': return 'bg-purple-600';
      case 'REAL': return 'bg-orange-600';
      case 'UDINT':
      case 'DINT':
      case 'UINT':
      case 'INT': return 'bg-cyan-600';
      default: return 'bg-gray-600';
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="container mx-auto max-w-7xl">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-green-400 mb-2">PLC Variable Configuration</h1>
          <p className="text-gray-400">Configure and monitor all PLC variables</p>
        </div>

        {/* Connection Status */}
        <Card className="bg-gray-800/50 border-gray-700 mb-6">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Connection Status</span>
              <Badge className={connectionStatus === 'connected' ? 'bg-green-600' : 'bg-red-600'}>
                {connectionStatus}
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-4">
              <Input
                type="text"
                value={controllerIp}
                onChange={(e) => setControllerIp(e.target.value)}
                placeholder="Controller IP"
                className="bg-gray-700 border-gray-600 text-white max-w-xs"
              />
              <Button 
                onClick={refreshData}
                variant="outline"
                className="border-blue-600 text-blue-400 hover:bg-blue-600/20"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh Data
              </Button>
              <div className="text-sm text-yellow-400">
                Note: IP changes require dev server restart for proxy updates
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Filters */}
        <Card className="bg-gray-800/50 border-gray-700 mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Filters & Search
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div>
                <label className="text-sm text-gray-400 mb-2 block">Search</label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search variables..."
                    className="bg-gray-700 border-gray-600 text-white pl-10"
                  />
                </div>
              </div>
              
              <div>
                <label className="text-sm text-gray-400 mb-2 block">Data Type</label>
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="w-full bg-gray-700 border border-gray-600 text-white rounded-md px-3 py-2"
                >
                  <option value="all">All Types</option>
                  <option value="BOOL">BOOL</option>
                  <option value="REAL">REAL</option>
                  <option value="UDINT">UDINT</option>
                  <option value="DINT">DINT</option>
                  <option value="UINT">UINT</option>
                  <option value="INT">INT</option>
                </select>
              </div>

              <div>
                <label className="text-sm text-gray-400 mb-2 block">Access</label>
                <select
                  value={filterAccess}
                  onChange={(e) => setFilterAccess(e.target.value)}
                  className="w-full bg-gray-700 border border-gray-600 text-white rounded-md px-3 py-2"
                >
                  <option value="all">All Access</option>
                  <option value="RW">Read/Write</option>
                  <option value="R">Read Only</option>
                </select>
              </div>

              <div className="flex items-end">
                <div className="text-sm text-gray-400">
                  Showing {filteredVariables.length} of {plcVariables.length} variables
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Variables Table */}
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <CardTitle>PLC Variables</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-gray-700">
                    <TableHead className="text-gray-300">ID</TableHead>
                    <TableHead className="text-gray-300">Name</TableHead>
                    <TableHead className="text-gray-300">Type</TableHead>
                    <TableHead className="text-gray-300">Access</TableHead>
                    <TableHead className="text-gray-300">Current Value</TableHead>
                    <TableHead className="text-gray-300">New Value</TableHead>
                    <TableHead className="text-gray-300">Description</TableHead>
                    <TableHead className="text-gray-300">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredVariables.map((variable) => {
                    const currentValue = getVariableCurrentValue(variable.name, variable.val);
                    const editValue = editingValues[variable.name] || '';
                    const canWrite = variable.access.includes('W');
                    
                    return (
                      <TableRow key={variable.id} className="border-gray-700">
                        <TableCell className="text-gray-300 font-mono text-sm">
                          {variable.id}
                        </TableCell>
                        <TableCell className="text-white font-mono text-sm">
                          {variable.name}
                        </TableCell>
                        <TableCell>
                          <Badge className={getTypeBadgeColor(variable.type)}>
                            {variable.type}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <Badge className={getAccessBadgeColor(variable.access)}>
                            {variable.access}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-green-400 font-mono">
                          {currentValue}
                        </TableCell>
                        <TableCell>
                          {canWrite ? (
                            <Input
                              type="text"
                              value={editValue}
                              onChange={(e) => handleValueChange(variable.name, e.target.value)}
                              placeholder={currentValue}
                              className="bg-gray-700 border-gray-600 text-white w-24"
                            />
                          ) : (
                            <span className="text-gray-500">Read-only</span>
                          )}
                        </TableCell>
                        <TableCell className="text-gray-400 text-sm max-w-xs">
                          {variable.desc || '-'}
                        </TableCell>
                        <TableCell>
                          {canWrite && editValue && (
                            <Button
                              size="sm"
                              onClick={() => handleSaveVariable(variable.name, variable.type)}
                              className="bg-green-600 hover:bg-green-700"
                            >
                              <Save className="h-3 w-3 mr-1" />
                              Save
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default PLCConfigPage;
